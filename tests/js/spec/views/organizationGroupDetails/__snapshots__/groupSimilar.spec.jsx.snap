// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Issues Similar View renders initially with loading component 1`] = `
<div>
  <div
    className="alert alert-block alert-warning"
  >
    <strong>
      Warning
      :
    </strong>
     
    This is an experimental feature. Data may not be immediately available while we process merges.
  </div>
  <LoadingIndicator />
</div>
`;

exports[`Issues Similar View renders with mocked data 1`] = `
<GroupGroupingView
  location={Object {}}
  params={
    Object {
      "groupId": "group-id",
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
  project={
    Object {
      "environments": Array [],
      "features": Array [
        "similarity-view",
      ],
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "slug": "project-slug",
      "teams": Array [],
    }
  }
  query=""
>
  <div>
    <div
      className="alert alert-block alert-warning"
    >
      <strong>
        Warning
        :
      </strong>
       
      This is an experimental feature. Data may not be immediately available while we process merges.
    </div>
    <SimilarList
      filteredItems={
        Array [
          Object {
            "aggregate": Object {
              "exception": 0.375,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "2",
              "culprit": "Constructor.onSimilarUpdate(app/views/groupSimilar/groupingMergedList)",
              "firstSeen": "2017-07-25T02:21:52Z",
              "hasSeen": false,
              "id": "274",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T02:22:19Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "ReferenceError",
                "value": "unmergedList is not defined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/project-slug/issues/274/",
              "project": Object {
                "id": "123",
                "name": "Internal",
                "slug": "project-slug",
              },
              "shareId": "312e323734",
              "shortId": "INTERNAL-4K",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "ReferenceError: unmergedList is not defined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.375,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.375,
                ],
              ],
            },
          },
          Object {
            "aggregate": Object {
              "exception": 0.01264,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "1",
              "culprit": "size(app/views/groupSimilar/groupingMergedList)",
              "firstSeen": "2017-07-25T02:20:35Z",
              "hasSeen": true,
              "id": "275",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T02:20:35Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'size' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/project-slug/issues/275/",
              "project": Object {
                "id": "123",
                "name": "Internal",
                "slug": "project-slug",
              },
              "shareId": "312e323735",
              "shortId": "INTERNAL-4M",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "TypeError: Cannot read property 'size' of undefined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.01264,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.01264,
                ],
              ],
            },
          },
          Object {
            "aggregate": Object {
              "exception": 0.0008615,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": Object {
                "avatar": Object {
                  "avatarType": "letter_avatar",
                  "avatarUuid": null,
                },
                "avatarUrl": "https://secure.gravatar.com/avatar/7b544e8eb9d08ed777be5aa82121155a?s=32&d=mm",
                "dateJoined": "2017-06-26T21:02:13.264Z",
                "email": "billy@sentry.io",
                "emails": Array [
                  Object {
                    "email": "billy@sentry.io",
                    "id": "1",
                    "is_verified": false,
                  },
                ],
                "has2fa": false,
                "id": "1",
                "identities": Array [],
                "isActive": true,
                "isManaged": false,
                "lastActive": "2017-07-26T18:28:19.391Z",
                "lastLogin": "2017-07-25T01:00:50.473Z",
                "name": "billy@sentry.io",
                "username": "billy@sentry.io",
              },
              "count": "15",
              "culprit": "stale(app/views/groupDetails)",
              "firstSeen": "2017-07-25T02:20:35Z",
              "hasSeen": true,
              "id": "216",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T23:21:19Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'stale' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/project-slug/issues/216/",
              "project": Object {
                "id": "123",
                "name": "Internal",
                "slug": "project-slug",
              },
              "shareId": "312e323136",
              "shortId": "INTERNAL-2S",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": Object {
                "reason": "changed_status",
              },
              "title": "TypeError: Cannot read property 'stale' of undefined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:application-chunks": 0.000235,
              "exception:stacktrace:pairs": 0.001488,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:application-chunks",
                  0.000235,
                ],
                Array [
                  "exception:stacktrace:pairs",
                  0.001488,
                ],
              ],
            },
          },
        ]
      }
      groupId="group-id"
      items={
        Array [
          Object {
            "aggregate": Object {
              "exception": 0.875,
            },
            "isBelowThreshold": false,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "90",
              "culprit": "length(app/views/groupSimilar/groupSimilarView)",
              "firstSeen": "2017-07-10T18:32:43Z",
              "hasSeen": false,
              "id": "271",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-24T23:41:44Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'length' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/project-slug/issues/271/",
              "project": Object {
                "id": "123",
                "name": "Internal",
                "slug": "project-slug",
              },
              "shareId": "312e323731",
              "shortId": "INTERNAL-4G",
              "status": "resolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "TypeError: Cannot read property 'length' of undefined",
              "type": "error",
              "userCount": 3,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.875,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.875,
                ],
              ],
            },
          },
        ]
      }
      onMerge={[Function]}
      orgId="org-slug"
    >
      <div
        className="similar-list-container"
      >
        <SpreadLayout
          center={true}
          className="similar-list-header"
          responsive={false}
        >
          <div
            className="spread-layout similar-list-header center"
          >
            <h2>
              <span>
                Similar Issues
              </span>
              <QueryCount
                count={4}
                hideIfEmpty={true}
                inline={true}
              >
                <div
                  className="query-count inline"
                >
                  <span>
                    (
                  </span>
                  <span
                    className="query-count-value"
                  >
                    4
                  </span>
                  <span>
                    )
                  </span>
                </div>
              </QueryCount>
            </h2>
            <StyledSimilarSpectrum>
              <SimilarSpectrum
                className="css-4unnmj-StyledSimilarSpectrum e1hn3xkk0"
              >
                <div
                  className="css-4unnmj-StyledSimilarSpectrum e1hn3xkk0"
                >
                  <span>
                    Similar
                  </span>
                  <SpectrumItem
                    colorIndex={4}
                  >
                    <span
                      className="css-h1r3gt-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={3}
                  >
                    <span
                      className="css-1j6o86h-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={2}
                  >
                    <span
                      className="css-1pl5ll-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={1}
                  >
                    <span
                      className="css-w9x78l-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={0}
                  >
                    <span
                      className="css-arcd4a-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <span>
                    Not Similar
                  </span>
                </div>
              </SimilarSpectrum>
            </StyledSimilarSpectrum>
          </div>
        </SpreadLayout>
        <SimilarToolbar
          onMerge={[Function]}
        >
          <Toolbar
            className="similar-toolbar"
          >
            <div
              className="similar-toolbar css-lblm1m-Toolbar e1pdx9kr0"
            >
              <SpreadLayout
                center={true}
                responsive={true}
              >
                <div
                  className="spread-layout center allow-responsive"
                >
                  <FlowLayout
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                    truncate={true}
                  >
                    <div
                      className="css-dk1sds-FlowLayout envzszi0"
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <FlowLayout
                        truncate={true}
                      >
                        <div
                          className="css-dk1sds-FlowLayout envzszi0"
                        >
                          <div
                            className="similar-toolbar-actions"
                          >
                            <LinkWithConfirmation
                              className="btn btn-sm btn-default"
                              data-test-id="merge"
                              disabled={true}
                              message="Are you sure you want to merge these issues?"
                              onConfirm={[Function]}
                              title="Merging 0 issues"
                            >
                              <Confirm
                                cancelText="Cancel"
                                confirmText="Confirm"
                                data-test-id="merge"
                                disableConfirmButton={false}
                                disabled={true}
                                message="Are you sure you want to merge these issues?"
                                onConfirm={[Function]}
                                priority="primary"
                                stopPropagation={false}
                              >
                                <a
                                  className="btn btn-sm btn-default disabled"
                                  disabled={true}
                                  onClick={[Function]}
                                  title="Merging 0 issues"
                                >
                                  Merge
                                   (
                                  0
                                  )
                                </a>
                                <Modal
                                  animation={false}
                                  autoFocus={true}
                                  backdrop={true}
                                  bsClass="modal"
                                  dialogComponentClass={[Function]}
                                  enforceFocus={true}
                                  keyboard={true}
                                  manager={
                                    ModalManager {
                                      "add": [Function],
                                      "containers": Array [],
                                      "data": Array [],
                                      "handleContainerOverflow": true,
                                      "hideSiblingNodes": true,
                                      "isTopModal": [Function],
                                      "modals": Array [],
                                      "remove": [Function],
                                    }
                                  }
                                  onHide={[Function]}
                                  renderBackdrop={[Function]}
                                  restoreFocus={true}
                                  show={false}
                                >
                                  <Modal
                                    autoFocus={true}
                                    backdrop={true}
                                    backdropClassName="modal-backdrop"
                                    containerClassName="modal-open"
                                    enforceFocus={true}
                                    keyboard={true}
                                    manager={
                                      ModalManager {
                                        "add": [Function],
                                        "containers": Array [],
                                        "data": Array [],
                                        "handleContainerOverflow": true,
                                        "hideSiblingNodes": true,
                                        "isTopModal": [Function],
                                        "modals": Array [],
                                        "remove": [Function],
                                      }
                                    }
                                    onEntering={[Function]}
                                    onExited={[Function]}
                                    onHide={[Function]}
                                    renderBackdrop={[Function]}
                                    restoreFocus={true}
                                    show={false}
                                  />
                                </Modal>
                              </Confirm>
                            </LinkWithConfirmation>
                          </div>
                        </div>
                      </FlowLayout>
                    </div>
                  </FlowLayout>
                  <div
                    className="similar-score-columns"
                  >
                    <ToolbarHeader
                      className="similar-score-column event-count-header"
                    >
                      <div
                        className="similar-score-column event-count-header css-1rwwmm2-ToolbarHeader e8n6jt30"
                      >
                        Events
                      </div>
                    </ToolbarHeader>
                    <ToolbarHeader
                      className="similar-score-column event-similar-header"
                    >
                      <div
                        className="similar-score-column event-similar-header css-1rwwmm2-ToolbarHeader e8n6jt30"
                      >
                        Exception
                      </div>
                    </ToolbarHeader>
                    <ToolbarHeader
                      className="similar-score-column event-similar-header"
                    >
                      <div
                        className="similar-score-column event-similar-header css-1rwwmm2-ToolbarHeader e8n6jt30"
                      >
                        Message
                      </div>
                    </ToolbarHeader>
                  </div>
                </div>
              </SpreadLayout>
            </div>
          </Toolbar>
        </SimilarToolbar>
        <div
          className="similar-list"
        >
          <SimilarIssueItem
            aggregate={
              Object {
                "exception": 0.875,
              }
            }
            groupId="group-id"
            isBelowThreshold={false}
            issue={
              Object {
                "annotations": Array [],
                "assignedTo": null,
                "count": "90",
                "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                "firstSeen": "2017-07-10T18:32:43Z",
                "hasSeen": false,
                "id": "271",
                "isBookmarked": false,
                "isPublic": false,
                "isSubscribed": true,
                "lastSeen": "2017-07-24T23:41:44Z",
                "level": "error",
                "logger": "javascript",
                "metadata": Object {
                  "type": "TypeError",
                  "value": "Cannot read property 'length' of undefined",
                },
                "numComments": 0,
                "permalink": "http://localhost:8000/sentry/project-slug/issues/271/",
                "project": Object {
                  "id": "123",
                  "name": "Internal",
                  "slug": "project-slug",
                },
                "shareId": "312e323731",
                "shortId": "INTERNAL-4G",
                "status": "resolved",
                "statusDetails": Object {},
                "subscriptionDetails": null,
                "title": "TypeError: Cannot read property 'length' of undefined",
                "type": "error",
                "userCount": 3,
              }
            }
            key="271"
            orgId="org-slug"
            score={
              Object {
                "exception:stacktrace:pairs": 0.875,
              }
            }
            scoresByInterface={
              Object {
                "exception": Array [
                  Array [
                    "exception:stacktrace:pairs",
                    0.875,
                  ],
                ],
              }
            }
          >
            <SpreadLayout
              center={true}
              className="group similar-issue isResolved"
              data-test-id="similar-item-row"
              onClick={[Function]}
              responsive={true}
            >
              <div
                className="spread-layout group similar-issue isResolved center allow-responsive"
                data-test-id="similar-item-row"
                onClick={[Function]}
              >
                <FlowLayout
                  truncate={true}
                >
                  <div
                    className="css-dk1sds-FlowLayout envzszi0"
                  >
                    <FlowLayout
                      truncate={true}
                    >
                      <div
                        className="css-dk1sds-FlowLayout envzszi0"
                      >
                        <div
                          className="action-column"
                        >
                          <Checkbox
                            checked={false}
                            id="271"
                            onChange={[Function]}
                            value="271"
                          >
                            <input
                              checked={false}
                              id="271"
                              onChange={[Function]}
                              type="checkbox"
                              value="271"
                            />
                          </Checkbox>
                        </div>
                        <div
                          className="event-details"
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <withRouter(EventOrGroupHeader)
                            data={
                              Object {
                                "annotations": Array [],
                                "assignedTo": null,
                                "count": "90",
                                "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                                "firstSeen": "2017-07-10T18:32:43Z",
                                "hasSeen": false,
                                "id": "271",
                                "isBookmarked": false,
                                "isPublic": false,
                                "isSubscribed": true,
                                "lastSeen": "2017-07-24T23:41:44Z",
                                "level": "error",
                                "logger": "javascript",
                                "metadata": Object {
                                  "type": "TypeError",
                                  "value": "Cannot read property 'length' of undefined",
                                },
                                "numComments": 0,
                                "permalink": "http://localhost:8000/sentry/project-slug/issues/271/",
                                "project": Object {
                                  "id": "123",
                                  "name": "Internal",
                                  "slug": "project-slug",
                                },
                                "shareId": "312e323731",
                                "shortId": "INTERNAL-4G",
                                "status": "resolved",
                                "statusDetails": Object {},
                                "subscriptionDetails": null,
                                "title": "TypeError: Cannot read property 'length' of undefined",
                                "type": "error",
                                "userCount": 3,
                              }
                            }
                          >
                            <EventOrGroupHeader
                              data={
                                Object {
                                  "annotations": Array [],
                                  "assignedTo": null,
                                  "count": "90",
                                  "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                                  "firstSeen": "2017-07-10T18:32:43Z",
                                  "hasSeen": false,
                                  "id": "271",
                                  "isBookmarked": false,
                                  "isPublic": false,
                                  "isSubscribed": true,
                                  "lastSeen": "2017-07-24T23:41:44Z",
                                  "level": "error",
                                  "logger": "javascript",
                                  "metadata": Object {
                                    "type": "TypeError",
                                    "value": "Cannot read property 'length' of undefined",
                                  },
                                  "numComments": 0,
                                  "permalink": "http://localhost:8000/sentry/project-slug/issues/271/",
                                  "project": Object {
                                    "id": "123",
                                    "name": "Internal",
                                    "slug": "project-slug",
                                  },
                                  "shareId": "312e323731",
                                  "shortId": "INTERNAL-4G",
                                  "status": "resolved",
                                  "statusDetails": Object {},
                                  "subscriptionDetails": null,
                                  "title": "TypeError: Cannot read property 'length' of undefined",
                                  "type": "error",
                                  "userCount": 3,
                                }
                              }
                              includeLink={true}
                              location={
                                Object {
                                  "query": Object {},
                                }
                              }
                              params={
                                Object {
                                  "groupId": "group-id",
                                  "orgId": "org-slug",
                                  "projectId": "project-slug",
                                }
                              }
                              router={
                                Object {
                                  "createHref": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/271/",
                                          "query": Object {
                                            "_allp": 1,
                                            "query": undefined,
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/",
                                          "query": Object {
                                            "query": "logger:javascript",
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/271/",
                                          "query": Object {
                                            "_allp": 1,
                                            "query": undefined,
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/",
                                          "query": Object {
                                            "query": "logger:javascript",
                                          },
                                        },
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "go": [MockFunction],
                                  "goBack": [MockFunction],
                                  "goForward": [MockFunction],
                                  "isActive": [MockFunction],
                                  "listen": [MockFunction],
                                  "location": Object {
                                    "query": Object {},
                                  },
                                  "params": Object {
                                    "groupId": "group-id",
                                    "orgId": "org-slug",
                                    "projectId": "project-slug",
                                  },
                                  "push": [MockFunction],
                                  "replace": [MockFunction],
                                  "setRouteLeaveHook": [MockFunction],
                                }
                              }
                              size="normal"
                            >
                              <div
                                className="event-issue-header"
                              >
                                <Title
                                  size="normal"
                                >
                                  <div
                                    className="css-m7twxv-Title-truncateStyles eex8od0"
                                    size="normal"
                                  >
                                    <GlobalSelectionLink
                                      data-test-id="resolved-issue"
                                      style={
                                        Object {
                                          "textDecoration": "line-through",
                                        }
                                      }
                                      to={
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/271/",
                                          "query": Object {
                                            "_allp": 1,
                                            "query": undefined,
                                          },
                                        }
                                      }
                                    >
                                      <Link
                                        data-test-id="resolved-issue"
                                        onlyActiveOnIndex={false}
                                        style={
                                          Object {
                                            "textDecoration": "line-through",
                                          }
                                        }
                                        to={
                                          Object {
                                            "pathname": "/organizations/org-slug/issues/271/",
                                            "query": Object {
                                              "_allp": 1,
                                              "query": undefined,
                                            },
                                          }
                                        }
                                      >
                                        <a
                                          data-test-id="resolved-issue"
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "textDecoration": "line-through",
                                            }
                                          }
                                        >
                                          <GroupLevel
                                            level="error"
                                          >
                                            <div
                                              className="css-1ipn9w2-GroupLevel eex8od5"
                                            >
                                              <Tooltip
                                                containerDisplayMode="inline-block"
                                                position="top"
                                                title="Error level: Error"
                                              >
                                                <Manager>
                                                  <Reference>
                                                    <InnerReference
                                                      setReferenceNode={[Function]}
                                                    >
                                                      <span
                                                        aria-describedby="tooltip-123456"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                      />
                                                    </InnerReference>
                                                  </Reference>
                                                </Manager>
                                              </Tooltip>
                                            </div>
                                          </GroupLevel>
                                          <EventOrGroupTitle
                                            data={
                                              Object {
                                                "annotations": Array [],
                                                "assignedTo": null,
                                                "count": "90",
                                                "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                                                "firstSeen": "2017-07-10T18:32:43Z",
                                                "hasSeen": false,
                                                "id": "271",
                                                "isBookmarked": false,
                                                "isPublic": false,
                                                "isSubscribed": true,
                                                "lastSeen": "2017-07-24T23:41:44Z",
                                                "level": "error",
                                                "logger": "javascript",
                                                "metadata": Object {
                                                  "type": "TypeError",
                                                  "value": "Cannot read property 'length' of undefined",
                                                },
                                                "numComments": 0,
                                                "permalink": "http://localhost:8000/sentry/project-slug/issues/271/",
                                                "project": Object {
                                                  "id": "123",
                                                  "name": "Internal",
                                                  "slug": "project-slug",
                                                },
                                                "shareId": "312e323731",
                                                "shortId": "INTERNAL-4G",
                                                "status": "resolved",
                                                "statusDetails": Object {},
                                                "subscriptionDetails": null,
                                                "title": "TypeError: Cannot read property 'length' of undefined",
                                                "type": "error",
                                                "userCount": 3,
                                              }
                                            }
                                            includeLink={true}
                                            location={
                                              Object {
                                                "query": Object {},
                                              }
                                            }
                                            params={
                                              Object {
                                                "groupId": "group-id",
                                                "orgId": "org-slug",
                                                "projectId": "project-slug",
                                              }
                                            }
                                            router={
                                              Object {
                                                "createHref": [MockFunction] {
                                                  "calls": Array [
                                                    Array [
                                                      Object {
                                                        "pathname": "/organizations/org-slug/issues/271/",
                                                        "query": Object {
                                                          "_allp": 1,
                                                          "query": undefined,
                                                        },
                                                      },
                                                    ],
                                                    Array [
                                                      Object {
                                                        "pathname": "/organizations/org-slug/issues/",
                                                        "query": Object {
                                                          "query": "logger:javascript",
                                                        },
                                                      },
                                                    ],
                                                    Array [
                                                      Object {
                                                        "pathname": "/organizations/org-slug/issues/271/",
                                                        "query": Object {
                                                          "_allp": 1,
                                                          "query": undefined,
                                                        },
                                                      },
                                                    ],
                                                    Array [
                                                      Object {
                                                        "pathname": "/organizations/org-slug/issues/",
                                                        "query": Object {
                                                          "query": "logger:javascript",
                                                        },
                                                      },
                                                    ],
                                                  ],
                                                  "results": Array [
                                                    Object {
                                                      "type": "return",
                                                      "value": undefined,
                                                    },
                                                    Object {
                                                      "type": "return",
                                                      "value": undefined,
                                                    },
                                                    Object {
                                                      "type": "return",
                                                      "value": undefined,
                                                    },
                                                    Object {
                                                      "type": "return",
                                                      "value": undefined,
                                                    },
                                                  ],
                                                },
                                                "go": [MockFunction],
                                                "goBack": [MockFunction],
                                                "goForward": [MockFunction],
                                                "isActive": [MockFunction],
                                                "listen": [MockFunction],
                                                "location": Object {
                                                  "query": Object {},
                                                },
                                                "params": Object {
                                                  "groupId": "group-id",
                                                  "orgId": "org-slug",
                                                  "projectId": "project-slug",
                                                },
                                                "push": [MockFunction],
                                                "replace": [MockFunction],
                                                "setRouteLeaveHook": [MockFunction],
                                              }
                                            }
                                            size="normal"
                                            style={
                                              Object {
                                                "fontWeight": 600,
                                              }
                                            }
                                          >
                                            <span
                                              style={
                                                Object {
                                                  "fontWeight": 600,
                                                }
                                              }
                                            >
                                              <span
                                                style={
                                                  Object {
                                                    "marginRight": 10,
                                                  }
                                                }
                                              >
                                                TypeError
                                              </span>
                                              <em
                                                title="length(app/views/groupSimilar/groupSimilarView)"
                                              >
                                                length(app/views/groupSimilar/groupSimilarView)
                                              </em>
                                              <br />
                                            </span>
                                          </EventOrGroupTitle>
                                        </a>
                                      </Link>
                                    </GlobalSelectionLink>
                                  </div>
                                </Title>
                                <Message
                                  size="normal"
                                >
                                  <div
                                    className="css-powhxs-Message-truncateStyles eex8od2"
                                    size="normal"
                                  >
                                    Cannot read property 'length' of undefined
                                  </div>
                                </Message>
                              </div>
                            </EventOrGroupHeader>
                          </withRouter(EventOrGroupHeader)>
                          <withRouter(EventOrGroupExtraDetails)
                            annotations={Array []}
                            assignedTo={null}
                            count="90"
                            culprit="length(app/views/groupSimilar/groupSimilarView)"
                            firstSeen="2017-07-10T18:32:43Z"
                            hasSeen={false}
                            id="271"
                            isBookmarked={false}
                            isPublic={false}
                            isSubscribed={true}
                            lastSeen={null}
                            level="error"
                            logger="javascript"
                            metadata={
                              Object {
                                "type": "TypeError",
                                "value": "Cannot read property 'length' of undefined",
                              }
                            }
                            numComments={0}
                            permalink="http://localhost:8000/sentry/project-slug/issues/271/"
                            project={
                              Object {
                                "id": "123",
                                "name": "Internal",
                                "slug": "project-slug",
                              }
                            }
                            shareId="312e323731"
                            shortId="INTERNAL-4G"
                            showAssignee={true}
                            status="resolved"
                            statusDetails={Object {}}
                            subscriptionDetails={null}
                            title="TypeError: Cannot read property 'length' of undefined"
                            type="error"
                            userCount={3}
                          >
                            <EventOrGroupExtraDetails
                              annotations={Array []}
                              assignedTo={null}
                              count="90"
                              culprit="length(app/views/groupSimilar/groupSimilarView)"
                              firstSeen="2017-07-10T18:32:43Z"
                              hasSeen={false}
                              id="271"
                              isBookmarked={false}
                              isPublic={false}
                              isSubscribed={true}
                              lastSeen={null}
                              level="error"
                              location={
                                Object {
                                  "query": Object {},
                                }
                              }
                              logger="javascript"
                              metadata={
                                Object {
                                  "type": "TypeError",
                                  "value": "Cannot read property 'length' of undefined",
                                }
                              }
                              numComments={0}
                              params={
                                Object {
                                  "groupId": "group-id",
                                  "orgId": "org-slug",
                                  "projectId": "project-slug",
                                }
                              }
                              permalink="http://localhost:8000/sentry/project-slug/issues/271/"
                              project={
                                Object {
                                  "id": "123",
                                  "name": "Internal",
                                  "slug": "project-slug",
                                }
                              }
                              router={
                                Object {
                                  "createHref": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/271/",
                                          "query": Object {
                                            "_allp": 1,
                                            "query": undefined,
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/",
                                          "query": Object {
                                            "query": "logger:javascript",
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/271/",
                                          "query": Object {
                                            "_allp": 1,
                                            "query": undefined,
                                          },
                                        },
                                      ],
                                      Array [
                                        Object {
                                          "pathname": "/organizations/org-slug/issues/",
                                          "query": Object {
                                            "query": "logger:javascript",
                                          },
                                        },
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "go": [MockFunction],
                                  "goBack": [MockFunction],
                                  "goForward": [MockFunction],
                                  "isActive": [MockFunction],
                                  "listen": [MockFunction],
                                  "location": Object {
                                    "query": Object {},
                                  },
                                  "params": Object {
                                    "groupId": "group-id",
                                    "orgId": "org-slug",
                                    "projectId": "project-slug",
                                  },
                                  "push": [MockFunction],
                                  "replace": [MockFunction],
                                  "setRouteLeaveHook": [MockFunction],
                                }
                              }
                              shareId="312e323731"
                              shortId="INTERNAL-4G"
                              showAssignee={true}
                              status="resolved"
                              statusDetails={Object {}}
                              subscriptionDetails={null}
                              title="TypeError: Cannot read property 'length' of undefined"
                              type="error"
                              userCount={3}
                            >
                              <GroupExtra>
                                <div
                                  className="css-1s7tq6o-GroupExtra eec9orn0"
                                >
                                  <GroupShortId
                                    avatar={
                                      <ProjectBadge
                                        avatarSize={14}
                                        hideAvatar={false}
                                        hideName={true}
                                        hideOverflow={true}
                                        project={
                                          Object {
                                            "id": "123",
                                            "name": "Internal",
                                            "slug": "project-slug",
                                          }
                                        }
                                      />
                                    }
                                    shortId="INTERNAL-4G"
                                  >
                                    <ShortId
                                      avatar={
                                        <ProjectBadge
                                          avatarSize={14}
                                          hideAvatar={false}
                                          hideName={true}
                                          hideOverflow={true}
                                          project={
                                            Object {
                                              "id": "123",
                                              "name": "Internal",
                                              "slug": "project-slug",
                                            }
                                          }
                                        />
                                      }
                                      className="css-1fj2cf7-GroupShortId eec9orn3"
                                      shortId="INTERNAL-4G"
                                    >
                                      <StyledShortId
                                        avatar={
                                          <ProjectBadge
                                            avatarSize={14}
                                            hideAvatar={false}
                                            hideName={true}
                                            hideOverflow={true}
                                            project={
                                              Object {
                                                "id": "123",
                                                "name": "Internal",
                                                "slug": "project-slug",
                                              }
                                            }
                                          />
                                        }
                                        className="css-1fj2cf7-GroupShortId eec9orn3"
                                        onClick={[Function]}
                                        shortId="INTERNAL-4G"
                                      >
                                        <div
                                          className="eec9orn3 css-dcccbj-StyledShortId-GroupShortId ebuncw00"
                                          onClick={[Function]}
                                        >
                                          <ProjectBadge
                                            avatarSize={14}
                                            hideAvatar={false}
                                            hideName={true}
                                            hideOverflow={true}
                                            project={
                                              Object {
                                                "id": "123",
                                                "name": "Internal",
                                                "slug": "project-slug",
                                              }
                                            }
                                          >
                                            <BaseBadge
                                              avatarProps={Object {}}
                                              avatarSize={14}
                                              displayName={
                                                <ForwardRef(render)
                                                  hideOverflow={true}
                                                >
                                                  project-slug
                                                </ForwardRef(render)>
                                              }
                                              hideAvatar={false}
                                              hideName={true}
                                              project={
                                                Object {
                                                  "id": "123",
                                                  "name": "Internal",
                                                  "slug": "project-slug",
                                                }
                                              }
                                            >
                                              <BaseBadgeWrapper>
                                                <div
                                                  className="css-7m3eov-BaseBadgeWrapper e165dl3i0"
                                                >
                                                  <EmotionCssPropInternal
                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": [Function],
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          "label:StyledAvatar;",
                                                          "margin-right:",
                                                          [Function],
                                                          ";flex-shrink:0;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2VCYWRnZS5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0dtQyIsImZpbGUiOiJiYXNlQmFkZ2UuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbmltcG9ydCBBdmF0YXIgZnJvbSAnYXBwL2NvbXBvbmVudHMvYXZhdGFyJztcbmltcG9ydCBzcGFjZSBmcm9tICdhcHAvc3R5bGVzL3NwYWNlJztcbmltcG9ydCBvdmVyZmxvd0VsbGlwc2lzIGZyb20gJ2FwcC9zdHlsZXMvb3ZlcmZsb3dFbGxpcHNpcyc7XG5pbXBvcnQgU2VudHJ5VHlwZXMgZnJvbSAnYXBwL3NlbnRyeVR5cGVzJztcblxuY29uc3QgQmFzaWNNb2RlbFNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtzbHVnOiBQcm9wVHlwZXMuc3RyaW5nfSk7XG5cbmNsYXNzIEJhc2VCYWRnZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRlYW06IFByb3BUeXBlcy5vbmVPZlR5cGUoW0Jhc2ljTW9kZWxTaGFwZSwgU2VudHJ5VHlwZXMuVGVhbV0pLFxuICAgIG9yZ2FuaXphdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbQmFzaWNNb2RlbFNoYXBlLCBTZW50cnlUeXBlcy5Pcmdhbml6YXRpb25dKSxcbiAgICBwcm9qZWN0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtCYXNpY01vZGVsU2hhcGUsIFNlbnRyeVR5cGVzLlByb2plY3RdKSxcbiAgICBtZW1iZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW0Jhc2ljTW9kZWxTaGFwZSwgU2VudHJ5VHlwZXMuTWVtYmVyXSksXG4gICAgdXNlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbQmFzaWNNb2RlbFNoYXBlLCBTZW50cnlUeXBlcy5Vc2VyXSksXG5cbiAgICAvKipcbiAgICAgKiBBdmF0YXIgc2l6ZVxuICAgICAqL1xuICAgIGF2YXRhclNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgYXZhdGFyXG4gICAgICovXG4gICAgaGlkZUF2YXRhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBBZGRpdGlvbmFsIHByb3BzIGZvciBBdmF0YXIgY29tcG9uZW50XG4gICAgICovXG4gICAgYXZhdGFyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgbWFpbiBkaXNwbGF5IG5hbWVcbiAgICAgKi9cbiAgICBoaWRlTmFtZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzcGxheU5hbWU6IFByb3BUeXBlcy5ub2RlLFxuICAgIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMubm9kZSxcbiAgICBhdmF0YXJDbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF2YXRhclByb3BzOiB7fSxcbiAgICBhdmF0YXJTaXplOiAyNCxcbiAgICBoaWRlQXZhdGFyOiBmYWxzZSxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaGlkZUF2YXRhcixcbiAgICAgIGhpZGVOYW1lLFxuICAgICAgYXZhdGFyU2l6ZSxcbiAgICAgIGF2YXRhckNsYXNzTmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBhdmF0YXJQcm9wcyxcbiAgICAgIHRlYW0sXG4gICAgICBvcmdhbml6YXRpb24sXG4gICAgICBwcm9qZWN0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHRlYW0sXG4gICAgICBvcmdhbml6YXRpb24sXG4gICAgICBwcm9qZWN0LFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2VCYWRnZVdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICB7IWhpZGVBdmF0YXIgJiYgKFxuICAgICAgICAgIDxTdHlsZWRBdmF0YXJcbiAgICAgICAgICAgIGNzcz17YXZhdGFyQ2xhc3NOYW1lfVxuICAgICAgICAgICAgc2l6ZT17YXZhdGFyU2l6ZX1cbiAgICAgICAgICAgIGhpZGVOYW1lPXtoaWRlTmFtZX1cbiAgICAgICAgICAgIHsuLi5hdmF0YXJQcm9wcyB8fCB7fX1cbiAgICAgICAgICAgIHsuLi5kYXRhfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG5cbiAgICAgICAgPERpc3BsYXlOYW1lQW5kRGVzY3JpcHRpb24+XG4gICAgICAgICAgeyFoaWRlTmFtZSAmJiAoXG4gICAgICAgICAgICA8RGlzcGxheU5hbWUgZGF0YS10ZXN0LWlkPVwiYmFkZ2UtZGlzcGxheS1uYW1lXCI+e2Rpc3BsYXlOYW1lfTwvRGlzcGxheU5hbWU+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7ISFkZXNjcmlwdGlvbiAmJiA8RGVzY3JpcHRpb24+e2Rlc2NyaXB0aW9ufTwvRGVzY3JpcHRpb24+fVxuICAgICAgICA8L0Rpc3BsYXlOYW1lQW5kRGVzY3JpcHRpb24+XG4gICAgICA8L0Jhc2VCYWRnZVdyYXBwZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBCYXNlQmFkZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VCYWRnZTtcblxuY29uc3QgU3R5bGVkQXZhdGFyID0gc3R5bGVkKEF2YXRhcilgXG4gIG1hcmdpbi1yaWdodDogJHtwID0+IChwLmhpZGVOYW1lID8gMCA6IHNwYWNlKDEpKX07XG4gIGZsZXgtc2hyaW5rOiAwO1xuYDtcblxuY29uc3QgRGlzcGxheU5hbWVBbmREZXNjcmlwdGlvbiA9IHN0eWxlZCgnZGl2JylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRGlzcGxheU5hbWUgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIGxpbmUtaGVpZ2h0OiAxLjI7XG5gO1xuXG5jb25zdCBEZXNjcmlwdGlvbiA9IHN0eWxlZCgnZGl2JylgXG4gIGZvbnQtc2l6ZTogMC44NzVlbTtcbiAgbWFyZ2luLXRvcDogJHtzcGFjZSgwLjI1KX07XG4gIGNvbG9yOiAke3AgPT4gcC50aGVtZS5ncmF5Mn07XG4gIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICAke292ZXJmbG93RWxsaXBzaXN9O1xuYDtcbiJdfQ== */",
                                                        ],
                                                        "defaultProps": Object {
                                                          "hasTooltip": false,
                                                        },
                                                        "displayName": "StyledAvatar",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    hideName={true}
                                                    project={
                                                      Object {
                                                        "id": "123",
                                                        "name": "Internal",
                                                        "slug": "project-slug",
                                                      }
                                                    }
                                                    size={14}
                                                  >
                                                    <StyledAvatar
                                                      className="css-0"
                                                      hasTooltip={false}
                                                      hideName={true}
                                                      project={
                                                        Object {
                                                          "id": "123",
                                                          "name": "Internal",
                                                          "slug": "project-slug",
                                                        }
                                                      }
                                                      size={14}
                                                    >
                                                      <Avatar
                                                        className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                        hasTooltip={false}
                                                        hideName={true}
                                                        project={
                                                          Object {
                                                            "id": "123",
                                                            "name": "Internal",
                                                            "slug": "project-slug",
                                                          }
                                                        }
                                                        size={14}
                                                      >
                                                        <ProjectAvatar
                                                          className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                          hasTooltip={false}
                                                          hideName={true}
                                                          project={
                                                            Object {
                                                              "id": "123",
                                                              "name": "Internal",
                                                              "slug": "project-slug",
                                                            }
                                                          }
                                                          size={14}
                                                        >
                                                          <PlatformList
                                                            className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                            consistentWidth={false}
                                                            direction="right"
                                                            hasTooltip={false}
                                                            hideName={true}
                                                            max={1}
                                                            platforms={Array []}
                                                            size={14}
                                                          >
                                                            <PlatformIcons
                                                              className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                              consistentWidth={false}
                                                              direction="right"
                                                              max={1}
                                                              size={14}
                                                            >
                                                              <div
                                                                className="e165dl3i1 css-dyodzz-PlatformIcons-StyledAvatar ezvce7z0"
                                                                direction="right"
                                                                max={1}
                                                                size={14}
                                                              >
                                                                <StyledPlatformIcon
                                                                  platform="default"
                                                                  size={14}
                                                                >
                                                                  <Component
                                                                    className="css-7okses-StyledPlatformIcon ezvce7z1"
                                                                    platform="default"
                                                                    size={14}
                                                                  >
                                                                    <Platformicon
                                                                      className="css-7okses-StyledPlatformIcon ezvce7z1"
                                                                      platform="default"
                                                                      size="14px"
                                                                    >
                                                                      <img
                                                                        className="css-7okses-StyledPlatformIcon ezvce7z1"
                                                                        height="14px"
                                                                        src={
                                                                          Object {
                                                                            "default": Object {
                                                                              "id": "test",
                                                                              "viewBox": Object {},
                                                                            },
                                                                          }
                                                                        }
                                                                        width="14px"
                                                                      />
                                                                    </Platformicon>
                                                                  </Component>
                                                                </StyledPlatformIcon>
                                                              </div>
                                                            </PlatformIcons>
                                                          </PlatformList>
                                                        </ProjectAvatar>
                                                      </Avatar>
                                                    </StyledAvatar>
                                                  </EmotionCssPropInternal>
                                                  <DisplayNameAndDescription>
                                                    <div
                                                      className="css-1d2tk0c-DisplayNameAndDescription e165dl3i2"
                                                    />
                                                  </DisplayNameAndDescription>
                                                </div>
                                              </BaseBadgeWrapper>
                                            </BaseBadge>
                                          </ProjectBadge>
                                          <StyledAutoSelectText
                                            avatar={true}
                                          >
                                            <AutoSelectText
                                              className="css-xnqjkz-StyledAutoSelectText ebuncw01"
                                            >
                                              <div
                                                className="auto-select-text css-xnqjkz-StyledAutoSelectText ebuncw01"
                                                onClick={[Function]}
                                              >
                                                <span>
                                                  INTERNAL-4G
                                                </span>
                                              </div>
                                            </AutoSelectText>
                                          </StyledAutoSelectText>
                                        </div>
                                      </StyledShortId>
                                    </ShortId>
                                  </GroupShortId>
                                  <StyledTimes
                                    firstSeen="2017-07-10T18:32:43Z"
                                    lastSeen={null}
                                  >
                                    <Times
                                      className="css-2hucfb-StyledTimes eec9orn1"
                                      firstSeen="2017-07-10T18:32:43Z"
                                      lastSeen={null}
                                    >
                                      <Container>
                                        <div
                                          className="css-1lz86t0-Container e1f1on0q0"
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Times"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                            css={
                                              Object {
                                                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWVzLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQmdCIiwiZmlsZSI6InRpbWVzLmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3NzfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQge3R9IGZyb20gJ2FwcC9sb2NhbGUnO1xuaW1wb3J0IElubGluZVN2ZyBmcm9tICdhcHAvY29tcG9uZW50cy9pbmxpbmVTdmcnO1xuaW1wb3J0IFRpbWVTaW5jZSBmcm9tICdhcHAvY29tcG9uZW50cy90aW1lU2luY2UnO1xuaW1wb3J0IG92ZXJmbG93RWxsaXBzaXMgZnJvbSAnYXBwL3N0eWxlcy9vdmVyZmxvd0VsbGlwc2lzJztcblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBmaXJzdCAmIGxhc3Qgc2VlbiB0aW1lcyBmb3IgYSBncm91cCBvciBldmVudCB3aXRoXG4gKiBhIGNsb2NrIGljb24uXG4gKi9cbmNvbnN0IFRpbWVzID0gcHJvcHMgPT4ge1xuICBjb25zdCB7bGFzdFNlZW4sIGZpcnN0U2Vlbn0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke292ZXJmbG93RWxsaXBzaXN9XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIHtsYXN0U2VlbiAmJiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPEdyb3VwVGltZUljb24gc3JjPVwiaWNvbi1jbG9jay1zbVwiIC8+XG4gICAgICAgICAgICA8VGltZVNpbmNlIGRhdGU9e2xhc3RTZWVufSBzdWZmaXg9e3QoJ2FnbycpfSAvPlxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIHtmaXJzdFNlZW4gJiYgbGFzdFNlZW4gJiYgKFxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImhpZGRlbi14cyBoaWRkZW4tc21cIj4mbmJzcDvigJQmbmJzcDs8L3NwYW4+XG4gICAgICAgICl9XG4gICAgICAgIHtmaXJzdFNlZW4gJiYgKFxuICAgICAgICAgIDxUaW1lU2luY2UgZGF0ZT17Zmlyc3RTZWVufSBzdWZmaXg9e3QoJ29sZCcpfSBjbGFzc05hbWU9XCJoaWRkZW4teHMgaGlkZGVuLXNtXCIgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblRpbWVzLnByb3BUeXBlcyA9IHtcbiAgbGFzdFNlZW46IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZpcnN0U2VlbjogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2JylgXG4gIGZsZXgtc2hyaW5rOiAxO1xuICBtaW4td2lkdGg6IDA7IC8qIGZsZXgtaGFjayBmb3Igb3ZlcmZsb3ctZWxsaXBzaXNlZCBjaGlsZHJlbiAqL1xuYDtcblxuY29uc3QgR3JvdXBUaW1lSWNvbiA9IHN0eWxlZChJbmxpbmVTdmcpYFxuICAvKiB0aGlzIGlzIHNvbGVseSBmb3Igb3B0aWNzLCBzaW5jZSBUaW1lU2luY2UgYWx3YXlzIGJlZ2luc1xuICB3aXRoIGEgbnVtYmVyLCBhbmQgbnVtYmVycyBkbyBub3QgaGF2ZSBkZXNjZW5kZXJzICovXG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lcztcbiJdfQ== */",
                                                "name": "1ggv3lw-Times",
                                                "next": undefined,
                                                "styles": "
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
;label:Times;",
                                                "toString": [Function],
                                              }
                                            }
                                          >
                                            <div
                                              className="css-1ggv3lw-Times"
                                            >
                                              <TimeSince
                                                className="hidden-xs hidden-sm"
                                                date="2017-07-10T18:32:43Z"
                                                suffix="old"
                                              >
                                                <time
                                                  className="hidden-xs hidden-sm"
                                                  date="2017-07-10T18:32:43Z"
                                                  dateTime="2017-07-10T18:32:43.000Z"
                                                  suffix="old"
                                                  title="July 10, 2017 6:32 PM UTC"
                                                >
                                                  3 months old
                                                </time>
                                              </TimeSince>
                                            </div>
                                          </EmotionCssPropInternal>
                                        </div>
                                      </Container>
                                    </Times>
                                  </StyledTimes>
                                  <LoggerAnnotation>
                                    <span
                                      className="css-1fjmum4-EventAnnotation-AnnotationNoMargin-LoggerAnnotation eec9orn6"
                                    >
                                      <Link
                                        onlyActiveOnIndex={false}
                                        style={Object {}}
                                        to={
                                          Object {
                                            "pathname": "/organizations/org-slug/issues/",
                                            "query": Object {
                                              "query": "logger:javascript",
                                            },
                                          }
                                        }
                                      >
                                        <a
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          javascript
                                        </a>
                                      </Link>
                                    </span>
                                  </LoggerAnnotation>
                                </div>
                              </GroupExtra>
                            </EventOrGroupExtraDetails>
                          </withRouter(EventOrGroupExtraDetails)>
                        </div>
                      </div>
                    </FlowLayout>
                    <button
                      className="btn btn-default btn-xs"
                      onClick={[Function]}
                      style={
                        Object {
                          "marginRight": 2,
                        }
                      }
                    >
                      Diff
                    </button>
                  </div>
                </FlowLayout>
                <div
                  className="similar-score-columns"
                >
                  <Count
                    className="similar-score-column"
                    value="90"
                  >
                    <span
                      className="similar-score-column"
                    >
                      90
                    </span>
                  </Count>
                  <div
                    className="similar-score-column"
                    key="exception"
                  >
                    <Hovercard
                      body={
                        <SimilarScoreCard
                          scoreList={
                            Array [
                              Array [
                                "exception:stacktrace:pairs",
                                0.875,
                              ],
                            ]
                          }
                        />
                      }
                      displayTimeout={100}
                      position="top"
                    >
                      <Manager>
                        <Reference>
                          <InnerReference
                            setReferenceNode={[Function]}
                          >
                            <span
                              aria-describedby="hovercard-123456"
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <StyledScoreBar
                                palette={
                                  Array [
                                    "#ec5e44",
                                    "#f38259",
                                    "#f9a66d",
                                    "#98b480",
                                    "#57be8c",
                                  ]
                                }
                                score={4}
                                size={40}
                                thickness={4}
                                vertical={true}
                              >
                                <ScoreBar
                                  className="css-19m1jt3-StyledScoreBar eecxaw40"
                                  palette={
                                    Array [
                                      "#ec5e44",
                                      "#f38259",
                                      "#f9a66d",
                                      "#98b480",
                                      "#57be8c",
                                    ]
                                  }
                                  score={4}
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-19m1jt3-StyledScoreBar eecxaw40"
                                  >
                                    <Bar
                                      color="#98b480"
                                      key="0"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-1gui0xz-Bar eecxaw41"
                                        color="#98b480"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      color="#98b480"
                                      key="1"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-1gui0xz-Bar eecxaw41"
                                        color="#98b480"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      color="#98b480"
                                      key="2"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-1gui0xz-Bar eecxaw41"
                                        color="#98b480"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      color="#98b480"
                                      key="3"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-1gui0xz-Bar eecxaw41"
                                        color="#98b480"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      empty={true}
                                      key="empty-0"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                  </div>
                                </ScoreBar>
                              </StyledScoreBar>
                            </span>
                          </InnerReference>
                        </Reference>
                      </Manager>
                    </Hovercard>
                  </div>
                  <div
                    className="similar-score-column"
                    key="message"
                  >
                    <Hovercard
                      body={0}
                      displayTimeout={100}
                      position="top"
                    >
                      <Manager>
                        <Reference>
                          <InnerReference
                            setReferenceNode={[Function]}
                          >
                            <span
                              aria-describedby="hovercard-123456"
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <StyledScoreBar
                                palette={
                                  Array [
                                    "#ec5e44",
                                    "#f38259",
                                    "#f9a66d",
                                    "#98b480",
                                    "#57be8c",
                                  ]
                                }
                                score={0}
                                size={40}
                                thickness={4}
                                vertical={true}
                              >
                                <ScoreBar
                                  className="css-19m1jt3-StyledScoreBar eecxaw40"
                                  palette={
                                    Array [
                                      "#ec5e44",
                                      "#f38259",
                                      "#f9a66d",
                                      "#98b480",
                                      "#57be8c",
                                    ]
                                  }
                                  score={0}
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-19m1jt3-StyledScoreBar eecxaw40"
                                  >
                                    <Bar
                                      empty={true}
                                      key="empty-0"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      empty={true}
                                      key="empty-1"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      empty={true}
                                      key="empty-2"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      empty={true}
                                      key="empty-3"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                    <Bar
                                      empty={true}
                                      key="empty-4"
                                      size={40}
                                      thickness={4}
                                      vertical={true}
                                    >
                                      <div
                                        className="css-3fvo9r-Bar eecxaw41"
                                        size={40}
                                      />
                                    </Bar>
                                  </div>
                                </ScoreBar>
                              </StyledScoreBar>
                            </span>
                          </InnerReference>
                        </Reference>
                      </Manager>
                    </Hovercard>
                  </div>
                </div>
              </div>
            </SpreadLayout>
          </SimilarIssueItem>
          <div
            className="similar-items-footer"
          >
            <button
              className="btn btn-default btn-xl"
              onClick={[Function]}
            >
              Show 
              3
               issues below threshold
            </button>
          </div>
        </div>
        <Styled(Pagination)
          onCursor={[Function]}
        >
          <Pagination
            className="css-yneqnx e1vkspke0"
            onCursor={[Function]}
          />
        </Styled(Pagination)>
      </div>
    </SimilarList>
  </div>
</GroupGroupingView>
`;
