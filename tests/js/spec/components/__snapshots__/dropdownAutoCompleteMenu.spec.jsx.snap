// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
<DropdownAutoCompleteMenu
  blendCorner={true}
  emptyMessage="No items"
  isOpen={true}
  items={
    Array [
      Object {
        "id": "countries",
        "items": Array [
          Object {
            "label": <div>
              New Zealand
            </div>,
            "value": "new zealand",
          },
          Object {
            "label": <div>
              Australia
            </div>,
            "value": "australia",
          },
        ],
        "label": "countries",
        "value": "countries",
      },
    ]
  }
  maxHeight={300}
  onSelect={[Function]}
  searchPlaceholder="Filter search"
>
  <AutoComplete
    closeOnSelect={true}
    disabled={false}
    inputIsActor={false}
    isOpen={true}
    itemToString={[Function]}
    onSelect={[Function]}
    resetInputOnClose={true}
    shouldSelectWithEnter={true}
    shouldSelectWithTab={false}
  >
    <DropdownMenu
      closeOnEscape={true}
      isOpen={true}
      keepMenuOpen={false}
      onClickOutside={[Function]}
    >
      <AutoCompleteRoot>
        <Component
          className="css-j1qymt-AutoCompleteRoot ejumqxq0"
        >
          <div
            className="css-j1qymt-AutoCompleteRoot ejumqxq0"
          >
            Click Me!
            <EmotionCssPropInternal
              __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "__emotion_base": "div",
                  "__emotion_forwardProp": undefined,
                  "__emotion_real": [Circular],
                  "__emotion_styles": Array [
                    "label:DropdownBubble;",
                    "background:",
                    [Function],
                    ";border:1px solid ",
                    [Function],
                    ";position:absolute;top:calc(100% - 1px);",
                    [Function],
                    ";z-index:",
                    [Function],
                    ";right:0;box-shadow:",
                    [Function],
                    ";overflow:hidden;",
                    [Function],
                    ";",
                    [Function],
                    ";",
                    [Function],
                    ";/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyb3Bkb3duQnViYmxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RW9DIiwiZmlsZSI6ImRyb3Bkb3duQnViYmxlLmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7Y3NzfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuLyoqXG4gKiBJZiBgYmxlbmRDb3JuZXJgIGlzIGZhbHNlLCB0aGVuIHdlIGFwcGx5IGJvcmRlci1yYWRpdXMgdG8gYWxsIGNvcm5lcnNcbiAqXG4gKiBPdGhlcndpc2UgYXBwbHkgcmFkaXVzIHRvIG9wcG9zaXRlIHNpZGUgb2YgYGFsaWduTWVudWAgKnVubGVzIGl0IGlzIGZpeGVkIHdpZHRoKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZXNlIGFyZSBcInByb3BzXCIgdGhhdCBnZXQgcGFzc2VkIGRvd24gKEkgZG9uJ3QgdGhpbmsgdGhlcmUncyBhIGdvb2Qgd2F5IHRvIGRlZmluZSBwcm9wVHlwZXMgb3RoZXJ3aXNlKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmJsZW5kV2l0aEFjdG9yIElmIHRoaXMgaXMgdHJ1ZSwgd2lsbCBtYWtlIGNvcm5lcnMgYmxlbmQgd2l0aCBpdHMgb3BlbmVyIChzbyBubyBib3JkZXIgcmFkaXVzKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmJsZW5kQ29ybmVyIElmIHRoaXMgaXMgdHJ1ZSwgd2lsbCBtYWtlIGEgc2luZ2xlIGNvcm5lciBibGVuZGVkIHdpdGggYWN0b3IgKGRlcGVuZHMgb24gYW5jaG9yIG9yaWVudGF0aW9uKVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYWxpZ25NZW51IENhbiBhbGlnbiB0aGUgbWVudSBlaXRoZXIgXCJsZWZ0XCIgb3IgXCJyaWdodFwiXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy53aWR0aCBUaGUgd2lkdGggb2YgdGhlIG1lbnVcbiAqL1xuY29uc3QgZ2V0TWVudUJvcmRlclJhZGl1cyA9ICh7YmxlbmRXaXRoQWN0b3IsIGJsZW5kQ29ybmVyLCBhbGlnbk1lbnUsIHdpZHRoLCB0aGVtZX0pID0+IHtcbiAgY29uc3QgcmFkaXVzID0gdGhlbWUuYm9yZGVyUmFkaXVzO1xuICBpZiAoIWJsZW5kQ29ybmVyKSB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7cmFkaXVzfTtcbiAgICBgO1xuICB9XG5cbiAgLy8gSWYgbWVudSB3aWR0aCBpcyB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgY29udHJvbFxuICBjb25zdCBpc0Z1bGxXaWR0aCA9IHdpZHRoID09PSAnMTAwJSc7XG5cbiAgLy8gTm8gdG9wIGJvcmRlciByYWRpdXMgaWYgd2lkdGhzIG1hdGNoXG4gIGNvbnN0IGhhc1RvcExlZnRSYWRpdXMgPSAhYmxlbmRXaXRoQWN0b3IgJiYgIWlzRnVsbFdpZHRoICYmIGFsaWduTWVudSAhPT0gJ2xlZnQnO1xuICBjb25zdCBoYXNUb3BSaWdodFJhZGl1cyA9ICFibGVuZFdpdGhBY3RvciAmJiAhaXNGdWxsV2lkdGggJiYgIWhhc1RvcExlZnRSYWRpdXM7XG5cbiAgcmV0dXJuIGNzc2BcbiAgICBib3JkZXItcmFkaXVzOiAke2hhc1RvcExlZnRSYWRpdXMgPyByYWRpdXMgOiAwfSAke2hhc1RvcFJpZ2h0UmFkaXVzID8gcmFkaXVzIDogMH1cbiAgICAgICR7cmFkaXVzfSAke3JhZGl1c307XG4gIGA7XG59O1xuXG5jb25zdCBnZXRNZW51QXJyb3cgPSAoe21lbnVXaXRoQXJyb3csIGFsaWduTWVudX0pID0+IHtcbiAgaWYgKCFtZW51V2l0aEFycm93KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGFsaWduUmlnaHQgPSBhbGlnbk1lbnUgPT09ICdyaWdodCc7XG5cbiAgcmV0dXJuIGNzc2BcbiAgICB0b3A6IDMycHg7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgICBib3JkZXItbGVmdDogOXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXJpZ2h0OiA5cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItYm90dG9tOiA5cHggc29saWQgcmdiYSg1MiwgNjAsIDY5LCAwLjM1KTtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC05cHg7XG4gICAgICBsZWZ0OiAxMHB4O1xuICAgICAgei1pbmRleDogLTI7XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ2xlZnQ6IGF1dG87J307XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ3JpZ2h0OiAxMHB4Oyd9O1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXJpZ2h0OiA4cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItYm90dG9tOiA4cHggc29saWQgI2ZmZjtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC04cHg7XG4gICAgICBsZWZ0OiAxMXB4O1xuICAgICAgei1pbmRleDogLTE7XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ2xlZnQ6IGF1dG87J307XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ3JpZ2h0OiAxMXB4Oyd9O1xuICAgIH1cbiAgYDtcbn07XG5cbmNvbnN0IERyb3Bkb3duQnViYmxlID0gc3R5bGVkKCdkaXYnKWBcbiAgYmFja2dyb3VuZDogJHtwID0+IHAudGhlbWUuYmFja2dyb3VuZH07XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7cCA9PiBwLnRoZW1lLmJvcmRlckRhcmt9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogY2FsYygxMDAlIC0gMXB4KTtcbiAgJHtwID0+IChwLndpZHRoID8gYHdpZHRoOiAke3Aud2lkdGh9YCA6ICcnKX07XG4gIHotaW5kZXg6ICR7cCA9PlxuICAgIHAudGhlbWUuekluZGV4LmRyb3Bkb3duQXV0b2NvbXBsZXRlXG4gICAgICAubWVudX07IC8qIFRoaXMgaXMgbmVlZGVkIHRvIGJlIGFibGUgdG8gY292ZXIgZS5nLiBwYWdpbmF0aW9uIGJ1dHRvbnMsIGJ1dCBhbHNvIGJlIGJlbG93IGRyb3Bkb3duIGFjdG9yIGJ1dHRvbidzIHppbmRleCAqL1xuICByaWdodDogMDtcbiAgYm94LXNoYWRvdzogJHtwID0+IHAudGhlbWUuZHJvcFNoYWRvd0xpZ2h0fTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAke2dldE1lbnVCb3JkZXJSYWRpdXN9O1xuICAkeyh7YWxpZ25NZW51fSkgPT4gKGFsaWduTWVudSA9PT0gJ2xlZnQnID8gJ2xlZnQ6IDA7JyA6ICcnKX07XG5cbiAgJHtnZXRNZW51QXJyb3d9O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25CdWJibGU7XG4iXX0= */",
                    "label:BubbleWithMinWidth;",
                    Object {
                      "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                      "name": "13s4dk6",
                      "styles": "min-width:250px;",
                      "toString": [Function],
                    },
                  ],
                  "defaultProps": undefined,
                  "displayName": "BubbleWithMinWidth",
                  "render": [Function],
                  "withComponent": [Function],
                }
              }
              blendCorner={true}
              isStyled={true}
              onClick={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <BubbleWithMinWidth
                blendCorner={true}
                className="css-0"
                isStyled={true}
                onClick={[Function]}
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <div
                  className="css-8pqmpd-DropdownBubble-BubbleWithMinWidth ejumqxq11"
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <StyledInputWrapper>
                    <div
                      className="css-rg322a-StyledInputWrapper ejumqxq2"
                    >
                      <StyledInput
                        autoFocus={true}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        placeholder="Filter search"
                        value=""
                      >
                        <input
                          autoFocus={true}
                          className="css-7gzevw-Input-StyledInput ejumqxq3"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          placeholder="Filter search"
                          value=""
                        />
                      </StyledInput>
                      <InputLoadingWrapper>
                        <div
                          className="css-8mpytx-InputLoadingWrapper ejumqxq1"
                        />
                      </InputLoadingWrapper>
                    </div>
                  </StyledInputWrapper>
                  <div>
                    <StyledItemList
                      data-test-id="autocomplete-list"
                      maxHeight={300}
                    >
                      <div
                        className="css-shdn34-StyledItemList ejumqxq8"
                        data-test-id="autocomplete-list"
                      >
                        <LabelWithBorder
                          key="countries"
                        >
                          <div
                            className="css-krtym8-LabelWithBorder ejumqxq5"
                          >
                            <GroupLabel>
                              <div
                                className="css-14hlgih-GroupLabel ejumqxq7"
                              >
                                countries
                              </div>
                            </GroupLabel>
                          </div>
                        </LabelWithBorder>
                        <AutoCompleteItem
                          highlightedIndex={0}
                          index={0}
                          key="new zealand-0"
                          onClick={[Function]}
                        >
                          <div
                            className="css-uyf1cl-AutoCompleteItem ejumqxq4"
                            onClick={[Function]}
                          >
                            <div>
                              New Zealand
                            </div>
                          </div>
                        </AutoCompleteItem>
                        <AutoCompleteItem
                          highlightedIndex={0}
                          index={1}
                          key="australia-1"
                          onClick={[Function]}
                        >
                          <div
                            className="css-1m67ctw-AutoCompleteItem ejumqxq4"
                            onClick={[Function]}
                          >
                            <div>
                              Australia
                            </div>
                          </div>
                        </AutoCompleteItem>
                      </div>
                    </StyledItemList>
                  </div>
                </div>
              </BubbleWithMinWidth>
            </EmotionCssPropInternal>
          </div>
        </Component>
      </AutoCompleteRoot>
    </DropdownMenu>
  </AutoComplete>
</DropdownAutoCompleteMenu>
`;

exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
<DropdownAutoCompleteMenu
  blendCorner={true}
  emptyMessage="No items"
  isOpen={true}
  items={
    Array [
      Object {
        "label": <div>
          Apple
        </div>,
        "value": "apple",
      },
      Object {
        "label": <div>
          Bacon
        </div>,
        "value": "bacon",
      },
      Object {
        "label": <div>
          Corn
        </div>,
        "value": "corn",
      },
    ]
  }
  maxHeight={300}
  onSelect={[Function]}
  searchPlaceholder="Filter search"
>
  <AutoComplete
    closeOnSelect={true}
    disabled={false}
    inputIsActor={false}
    isOpen={true}
    itemToString={[Function]}
    onSelect={[Function]}
    resetInputOnClose={true}
    shouldSelectWithEnter={true}
    shouldSelectWithTab={false}
  >
    <DropdownMenu
      closeOnEscape={true}
      isOpen={true}
      keepMenuOpen={false}
      onClickOutside={[Function]}
    >
      <AutoCompleteRoot>
        <Component
          className="css-j1qymt-AutoCompleteRoot ejumqxq0"
        >
          <div
            className="css-j1qymt-AutoCompleteRoot ejumqxq0"
          >
            Click Me!
            <EmotionCssPropInternal
              __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "__emotion_base": "div",
                  "__emotion_forwardProp": undefined,
                  "__emotion_real": [Circular],
                  "__emotion_styles": Array [
                    "label:DropdownBubble;",
                    "background:",
                    [Function],
                    ";border:1px solid ",
                    [Function],
                    ";position:absolute;top:calc(100% - 1px);",
                    [Function],
                    ";z-index:",
                    [Function],
                    ";right:0;box-shadow:",
                    [Function],
                    ";overflow:hidden;",
                    [Function],
                    ";",
                    [Function],
                    ";",
                    [Function],
                    ";/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyb3Bkb3duQnViYmxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RW9DIiwiZmlsZSI6ImRyb3Bkb3duQnViYmxlLmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7Y3NzfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuLyoqXG4gKiBJZiBgYmxlbmRDb3JuZXJgIGlzIGZhbHNlLCB0aGVuIHdlIGFwcGx5IGJvcmRlci1yYWRpdXMgdG8gYWxsIGNvcm5lcnNcbiAqXG4gKiBPdGhlcndpc2UgYXBwbHkgcmFkaXVzIHRvIG9wcG9zaXRlIHNpZGUgb2YgYGFsaWduTWVudWAgKnVubGVzIGl0IGlzIGZpeGVkIHdpZHRoKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZXNlIGFyZSBcInByb3BzXCIgdGhhdCBnZXQgcGFzc2VkIGRvd24gKEkgZG9uJ3QgdGhpbmsgdGhlcmUncyBhIGdvb2Qgd2F5IHRvIGRlZmluZSBwcm9wVHlwZXMgb3RoZXJ3aXNlKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmJsZW5kV2l0aEFjdG9yIElmIHRoaXMgaXMgdHJ1ZSwgd2lsbCBtYWtlIGNvcm5lcnMgYmxlbmQgd2l0aCBpdHMgb3BlbmVyIChzbyBubyBib3JkZXIgcmFkaXVzKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmJsZW5kQ29ybmVyIElmIHRoaXMgaXMgdHJ1ZSwgd2lsbCBtYWtlIGEgc2luZ2xlIGNvcm5lciBibGVuZGVkIHdpdGggYWN0b3IgKGRlcGVuZHMgb24gYW5jaG9yIG9yaWVudGF0aW9uKVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYWxpZ25NZW51IENhbiBhbGlnbiB0aGUgbWVudSBlaXRoZXIgXCJsZWZ0XCIgb3IgXCJyaWdodFwiXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy53aWR0aCBUaGUgd2lkdGggb2YgdGhlIG1lbnVcbiAqL1xuY29uc3QgZ2V0TWVudUJvcmRlclJhZGl1cyA9ICh7YmxlbmRXaXRoQWN0b3IsIGJsZW5kQ29ybmVyLCBhbGlnbk1lbnUsIHdpZHRoLCB0aGVtZX0pID0+IHtcbiAgY29uc3QgcmFkaXVzID0gdGhlbWUuYm9yZGVyUmFkaXVzO1xuICBpZiAoIWJsZW5kQ29ybmVyKSB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7cmFkaXVzfTtcbiAgICBgO1xuICB9XG5cbiAgLy8gSWYgbWVudSB3aWR0aCBpcyB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgY29udHJvbFxuICBjb25zdCBpc0Z1bGxXaWR0aCA9IHdpZHRoID09PSAnMTAwJSc7XG5cbiAgLy8gTm8gdG9wIGJvcmRlciByYWRpdXMgaWYgd2lkdGhzIG1hdGNoXG4gIGNvbnN0IGhhc1RvcExlZnRSYWRpdXMgPSAhYmxlbmRXaXRoQWN0b3IgJiYgIWlzRnVsbFdpZHRoICYmIGFsaWduTWVudSAhPT0gJ2xlZnQnO1xuICBjb25zdCBoYXNUb3BSaWdodFJhZGl1cyA9ICFibGVuZFdpdGhBY3RvciAmJiAhaXNGdWxsV2lkdGggJiYgIWhhc1RvcExlZnRSYWRpdXM7XG5cbiAgcmV0dXJuIGNzc2BcbiAgICBib3JkZXItcmFkaXVzOiAke2hhc1RvcExlZnRSYWRpdXMgPyByYWRpdXMgOiAwfSAke2hhc1RvcFJpZ2h0UmFkaXVzID8gcmFkaXVzIDogMH1cbiAgICAgICR7cmFkaXVzfSAke3JhZGl1c307XG4gIGA7XG59O1xuXG5jb25zdCBnZXRNZW51QXJyb3cgPSAoe21lbnVXaXRoQXJyb3csIGFsaWduTWVudX0pID0+IHtcbiAgaWYgKCFtZW51V2l0aEFycm93KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGFsaWduUmlnaHQgPSBhbGlnbk1lbnUgPT09ICdyaWdodCc7XG5cbiAgcmV0dXJuIGNzc2BcbiAgICB0b3A6IDMycHg7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgICBib3JkZXItbGVmdDogOXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXJpZ2h0OiA5cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItYm90dG9tOiA5cHggc29saWQgcmdiYSg1MiwgNjAsIDY5LCAwLjM1KTtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC05cHg7XG4gICAgICBsZWZ0OiAxMHB4O1xuICAgICAgei1pbmRleDogLTI7XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ2xlZnQ6IGF1dG87J307XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ3JpZ2h0OiAxMHB4Oyd9O1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXJpZ2h0OiA4cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItYm90dG9tOiA4cHggc29saWQgI2ZmZjtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC04cHg7XG4gICAgICBsZWZ0OiAxMXB4O1xuICAgICAgei1pbmRleDogLTE7XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ2xlZnQ6IGF1dG87J307XG4gICAgICAke2FsaWduUmlnaHQgJiYgJ3JpZ2h0OiAxMXB4Oyd9O1xuICAgIH1cbiAgYDtcbn07XG5cbmNvbnN0IERyb3Bkb3duQnViYmxlID0gc3R5bGVkKCdkaXYnKWBcbiAgYmFja2dyb3VuZDogJHtwID0+IHAudGhlbWUuYmFja2dyb3VuZH07XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7cCA9PiBwLnRoZW1lLmJvcmRlckRhcmt9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogY2FsYygxMDAlIC0gMXB4KTtcbiAgJHtwID0+IChwLndpZHRoID8gYHdpZHRoOiAke3Aud2lkdGh9YCA6ICcnKX07XG4gIHotaW5kZXg6ICR7cCA9PlxuICAgIHAudGhlbWUuekluZGV4LmRyb3Bkb3duQXV0b2NvbXBsZXRlXG4gICAgICAubWVudX07IC8qIFRoaXMgaXMgbmVlZGVkIHRvIGJlIGFibGUgdG8gY292ZXIgZS5nLiBwYWdpbmF0aW9uIGJ1dHRvbnMsIGJ1dCBhbHNvIGJlIGJlbG93IGRyb3Bkb3duIGFjdG9yIGJ1dHRvbidzIHppbmRleCAqL1xuICByaWdodDogMDtcbiAgYm94LXNoYWRvdzogJHtwID0+IHAudGhlbWUuZHJvcFNoYWRvd0xpZ2h0fTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAke2dldE1lbnVCb3JkZXJSYWRpdXN9O1xuICAkeyh7YWxpZ25NZW51fSkgPT4gKGFsaWduTWVudSA9PT0gJ2xlZnQnID8gJ2xlZnQ6IDA7JyA6ICcnKX07XG5cbiAgJHtnZXRNZW51QXJyb3d9O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25CdWJibGU7XG4iXX0= */",
                    "label:BubbleWithMinWidth;",
                    Object {
                      "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                      "name": "13s4dk6",
                      "styles": "min-width:250px;",
                      "toString": [Function],
                    },
                  ],
                  "defaultProps": undefined,
                  "displayName": "BubbleWithMinWidth",
                  "render": [Function],
                  "withComponent": [Function],
                }
              }
              blendCorner={true}
              isStyled={true}
              onClick={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <BubbleWithMinWidth
                blendCorner={true}
                className="css-0"
                isStyled={true}
                onClick={[Function]}
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <div
                  className="css-8pqmpd-DropdownBubble-BubbleWithMinWidth ejumqxq11"
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <StyledInputWrapper>
                    <div
                      className="css-rg322a-StyledInputWrapper ejumqxq2"
                    >
                      <StyledInput
                        autoFocus={true}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        placeholder="Filter search"
                        value=""
                      >
                        <input
                          autoFocus={true}
                          className="css-7gzevw-Input-StyledInput ejumqxq3"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          placeholder="Filter search"
                          value=""
                        />
                      </StyledInput>
                      <InputLoadingWrapper>
                        <div
                          className="css-8mpytx-InputLoadingWrapper ejumqxq1"
                        />
                      </InputLoadingWrapper>
                    </div>
                  </StyledInputWrapper>
                  <div>
                    <StyledItemList
                      data-test-id="autocomplete-list"
                      maxHeight={300}
                    >
                      <div
                        className="css-shdn34-StyledItemList ejumqxq8"
                        data-test-id="autocomplete-list"
                      >
                        <AutoCompleteItem
                          highlightedIndex={0}
                          index={0}
                          key="apple-0"
                          onClick={[Function]}
                        >
                          <div
                            className="css-uyf1cl-AutoCompleteItem ejumqxq4"
                            onClick={[Function]}
                          >
                            <div>
                              Apple
                            </div>
                          </div>
                        </AutoCompleteItem>
                        <AutoCompleteItem
                          highlightedIndex={0}
                          index={1}
                          key="bacon-1"
                          onClick={[Function]}
                        >
                          <div
                            className="css-1m67ctw-AutoCompleteItem ejumqxq4"
                            onClick={[Function]}
                          >
                            <div>
                              Bacon
                            </div>
                          </div>
                        </AutoCompleteItem>
                        <AutoCompleteItem
                          highlightedIndex={0}
                          index={2}
                          key="corn-2"
                          onClick={[Function]}
                        >
                          <div
                            className="css-1m67ctw-AutoCompleteItem ejumqxq4"
                            onClick={[Function]}
                          >
                            <div>
                              Corn
                            </div>
                          </div>
                        </AutoCompleteItem>
                      </div>
                    </StyledItemList>
                  </div>
                </div>
              </BubbleWithMinWidth>
            </EmotionCssPropInternal>
          </div>
        </Component>
      </AutoCompleteRoot>
    </DropdownMenu>
  </AutoComplete>
</DropdownAutoCompleteMenu>
`;

exports[`DropdownAutoCompleteMenu selects 1`] = `[MockFunction]`;
